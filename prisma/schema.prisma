// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "clientExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                BigInt  @id @default(autoincrement())
  userId            BigInt  @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String  @map(name: "provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           BigInt   @id @default(autoincrement())
  sessionToken String   @unique @map(name: "session_token")
  userId       BigInt   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model Contact {
  id        BigInt   @id @default(autoincrement())
  ownerId   BigInt   @map(name: "owner_id")
  contactId BigInt   @map(name: "contact_id")
  name      String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map(name: "created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map(name: "updated_at") @db.Timestamptz()

  owner   User @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)
  contact User @relation(name: "contact", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([ownerId, contactId])
  @@map(name: "contacts")
}

model Conversation {
  id           BigInt                    @id @default(autoincrement())
  spammedAt    DateTime                  @map(name: "spammed_at") @db.Timestamptz()
  archivedAt   DateTime                  @map(name: "archived_at") @db.Timestamptz()
  createdAt    DateTime                  @default(now()) @map(name: "created_at") @db.Timestamptz()
  updatedAt    DateTime                  @updatedAt @map(name: "updated_at") @db.Timestamptz()
  participants ConversationParticipant[]

  @@map(name: "conversations")
}

model ConversationParticipant {
  id             BigInt   @id @default(autoincrement())
  userId         BigInt   @map(name: "user_id")
  conversationId BigInt   @map(name: "conversation_id")
  createdAt      DateTime @default(now()) @map(name: "created_at") @db.Timestamptz()
  updatedAt      DateTime @updatedAt @map(name: "updated_at") @db.Timestamptz()

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map(name: "conversation_participant")
}

model User {
  id        BigInt    @id @default(autoincrement())
  name      String?   @db.VarChar(255)
  email     String?   @unique @db.VarChar(255)
  password  String?   @db.VarChar(255)
  createdAt DateTime  @default(now()) @map(name: "created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map(name: "updated_at") @db.Timestamptz()
  account   Account[]
  session   Session[]

  contacting    Contact[]                 @relation("owner")
  contacts      Contact[]                 @relation("contact")
  conversations ConversationParticipant[]

  @@map(name: "users")
}
