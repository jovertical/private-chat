// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                BigInt  @id @default(autoincrement())
  userId            BigInt  @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String  @map(name: "provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           BigInt   @id @default(autoincrement())
  sessionToken String   @unique @map(name: "session_token")
  userId       BigInt   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id           BigInt        @id @default(autoincrement())
  name         String?       @db.VarChar(255)
  email        String?       @unique @db.VarChar(255)
  password     String?       @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map(name: "created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map(name: "updated_at") @db.Timestamptz()
  account      Account[]
  session      Session[]

  @@map(name: "users")
}
